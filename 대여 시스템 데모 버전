import javax.swing.*;
import javax.swing.border.EmptyBorder;
import javax.swing.border.TitledBorder;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.*;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

// =================================================================================
// 1. 모델 클래스 - RentalRecord 추가
// =================================================================================
class User implements Serializable {
    private static final long serialVersionUID = 1L;
    private final String id; private final String name; private final String type; private final String password;
    public User(String id, String name, String type, String password) { this.id = id; this.name = name; this.type = type; this.password = password; }
    public String getId() { return id; } public String getName() { return name; } public String getType() { return type; } public String getPassword() { return password; }
    @Override public String toString() { return name + " (" + type + ")"; }
    @Override public boolean equals(Object o) { if (this == o) return true; if (o == null || getClass() != o.getClass()) return false; User user = (User) o; return id.equals(user.id); }
    @Override public int hashCode() { return id.hashCode(); }
}

class Item implements Serializable {
    private static final long serialVersionUID = 1L;
    private final String name; private final int maxStock; private List<User> renters; private final double baseFee;
    private transient List<Observer> observers = new ArrayList<>();
    public Item(String name, int initialStock, double baseFee) { this.name = name; this.maxStock = initialStock; this.baseFee = baseFee; this.renters = new ArrayList<>(); }
    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException { in.defaultReadObject(); this.observers = new ArrayList<>(); if (this.renters == null) { this.renters = new ArrayList<>(); } }
    private List<Observer> getObservers() { if (observers == null) { observers = new ArrayList<>(); } return observers; }
    public String getName() { return name; }
    public int getCurrentStock() { return maxStock - renters.size(); }
    public double getBaseFee() { return baseFee; }
    public boolean rentTo(User user) { if (getCurrentStock() > 0) { renters.add(user); notifyObservers(); return true; } return false; }
    public boolean returnBy(User user) { if (renters.contains(user)) { renters.remove(user); notifyObservers(); return true; } return false; }
    public void addObserver(Observer observer) { getObservers().add(observer); }
    public void notifyObservers() { getObservers().forEach(observer -> observer.update(this)); }
    @Override public String toString() { return name; }
}

/** [새로운 클래스] 대여 기록 한 건을 저장하는 모델 */
class RentalRecord implements Serializable {
    private static final long serialVersionUID = 1L;
    private final User user;
    private final String itemName;
    private final LocalDateTime rentalTime;
    private LocalDateTime returnTime; // 반납 시 기록됨

    public RentalRecord(User user, String itemName) {
        this.user = user;
        this.itemName = itemName;
        this.rentalTime = LocalDateTime.now();
        this.returnTime = null; // 처음엔 null
    }

    public void markAsReturned() {
        this.returnTime = LocalDateTime.now();
    }
    
    // Getter 메서드들 (테이블에 표시할 때 사용)
    public User getUser() { return user; }
    public String getItemName() { return itemName; }
    public LocalDateTime getRentalTime() { return rentalTime; }
    public LocalDateTime getReturnTime() { return returnTime; }
}

// =================================================================================
// 2. 비즈니스 로직 - RentalRecord를 사용하도록 수정
// =================================================================================
class RentalService {
    // 이제 서비스가 전체 대여 기록을 관리
    private final List<RentalRecord> rentalHistory;

    public RentalService(List<RentalRecord> rentalHistory) {
        this.rentalHistory = rentalHistory;
    }

    public String rentItem(User user, Item item, DiscountStrategy strategy) {
        if (item.rentTo(user)) {
            // 대여 성공 시, 새로운 대여 기록 생성 및 추가
            rentalHistory.add(new RentalRecord(user, item.getName()));
            
            double finalFee = strategy.applyDiscount(item.getBaseFee());
            return String.format("[대여 성공] %s -> %s", user.getName(), item.getName());
        } else {
            return "[대여 실패] " + item.getName() + " 재고가 없습니다.";
        }
    }

    public String returnItem(User user, Item item) {
        // 현재 사용자가 빌린 해당 물품의 미반납 기록 찾기
        Optional<RentalRecord> activeRecord = rentalHistory.stream()
                .filter(r -> r.getUser().equals(user) && r.getItemName().equals(item.getName()) && r.getReturnTime() == null)
                .findFirst();

        if (activeRecord.isPresent()) {
            if (item.returnBy(user)) {
                // 반납 성공 시, 찾은 기록에 반납 시간 기록
                activeRecord.get().markAsReturned();
                return String.format("[반납 성공] %s <- %s", user.getName(), item.getName());
            }
        }
        return String.format("[반납 실패] %s님은 %s을(를) 대여하지 않았습니다.", user.getName(), item.getName());
    }
}


// ... (Observer, DiscountStrategy는 이전과 동일) ...
interface Observer { void update(Item item); }
interface DiscountStrategy { double applyDiscount(double originalFee); String getStrategyName(); }
class StudentDiscountStrategy implements DiscountStrategy { @Override public double applyDiscount(double originalFee) { return originalFee * 0.8; } @Override public String getStrategyName() { return "학생 할인 (20%)"; } }
class NoDiscountStrategy implements DiscountStrategy { @Override public double applyDiscount(double originalFee) { return originalFee; } @Override public String getStrategyName() { return "일반 (할인 없음)"; } }

// =================================================================================
// 3. 데이터 관리 클래스 - history.dat 파일 저장/로드 추가
// =================================================================================
class DataManager {
    private static final String USERS_FILE = "users.dat";
    private static final String ITEMS_FILE = "items.dat";
    private static final String HISTORY_FILE = "history.dat"; // 추가

    public void saveData(List<User> users, List<Item> items, List<RentalRecord> history) {
        try (ObjectOutputStream oosUsers = new ObjectOutputStream(new FileOutputStream(USERS_FILE));
             ObjectOutputStream oosItems = new ObjectOutputStream(new FileOutputStream(ITEMS_FILE));
             ObjectOutputStream oosHistory = new ObjectOutputStream(new FileOutputStream(HISTORY_FILE))) { // 추가
            oosUsers.writeObject(users);
            oosItems.writeObject(items);
            oosHistory.writeObject(history); // 추가
            System.out.println("모든 데이터가 성공적으로 저장되었습니다.");
        } catch (IOException e) {
            System.err.println("데이터 저장 중 오류 발생: " + e.getMessage());
        }
    }
    // loadUsers, loadItems 메서드는 이전과 동일
    @SuppressWarnings("unchecked") public List<User> loadUsers() { File file = new File(USERS_FILE); if (file.exists()) { try (ObjectInputStream ois = new ObjectInputStream(new FileInputStream(file))) { return (List<User>) ois.readObject(); } catch (IOException | ClassNotFoundException e) { System.err.println("사용자 데이터 로딩 중 오류 발생: " + e.getMessage()); } } return new ArrayList<>(); }
    @SuppressWarnings("unchecked") public List<Item> loadItems() { File file = new File(ITEMS_FILE); if (file.exists()) { try (ObjectInputStream ois = new ObjectInputStream(new FileInputStream(file))) { return (List<Item>) ois.readObject(); } catch (IOException | ClassNotFoundException e) { System.err.println("물품 데이터 로딩 중 오류 발생: " + e.getMessage()); } } return new ArrayList<>(); }
    
    // 대여 기록 로드 메서드 추가
    @SuppressWarnings("unchecked")
    public List<RentalRecord> loadHistory() {
        File file = new File(HISTORY_FILE);
        if (file.exists()) {
            try (ObjectInputStream ois = new ObjectInputStream(new FileInputStream(file))) {
                return (List<RentalRecord>) ois.readObject();
            } catch (IOException | ClassNotFoundException e) {
                System.err.println("대여 기록 로딩 중 오류 발생: " + e.getMessage());
            }
        }
        return new ArrayList<>();
    }
}


// ... (UI 클래스들) ...
class MainAppFrame extends JFrame implements Observer {
    private final DataManager dataManager; private final RentalService rentalService; private final User loggedInUser;
    private final List<Item> items; private final List<User> users; private final List<RentalRecord> rentalHistory;
    private JComboBox<Item> itemComboBox; private JLabel strategyLabel; private JTextArea itemStatusArea; private JTextArea logArea; private DiscountStrategy userStrategy;
    
    public MainAppFrame(DataManager dataManager, RentalService rentalService, User loggedInUser, List<User> users, List<Item> items, List<RentalRecord> rentalHistory) {
        this.dataManager = dataManager; this.rentalService = rentalService; this.loggedInUser = loggedInUser;
        this.users = users; this.items = items; this.rentalHistory = rentalHistory;
        items.forEach(item -> item.addObserver(this));
        if ("Student".equals(loggedInUser.getType())) { this.userStrategy = new StudentDiscountStrategy(); } else { this.userStrategy = new NoDiscountStrategy(); }
        setupUI(); updateItemStatusArea();
    }

    private void setupUI() {
        setTitle("교내 물품 대여 시스템"); setSize(850, 650);
        setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
        addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent e) {
                dataManager.saveData(users, items, rentalHistory); // 저장 시 history 추가
                System.exit(0);
            }
        });
        
        JMenuBar menuBar = new JMenuBar();
        if ("Admin".equals(loggedInUser.getType())) {
            JMenu adminMenu = new JMenu("관리 (Admin)");
            JMenuItem manageUsersItems = new JMenuItem("사용자/물품 관리...");
            manageUsersItems.addActionListener(e -> new AdminDialog(this, users, items).setVisible(true));
            
            // [새로운 메뉴] 대여 기록 보기
            JMenuItem viewHistory = new JMenuItem("전체 대여 기록 보기...");
            viewHistory.addActionListener(e -> new RentalHistoryDialog(this, rentalHistory).setVisible(true));

            adminMenu.add(manageUsersItems);
            adminMenu.add(viewHistory); // 메뉴에 추가
            menuBar.add(adminMenu);
        }
        setJMenuBar(menuBar);
        // ... (이하 setupUI의 나머지 부분은 이전과 동일)
        setLayout(new BorderLayout(10, 10)); JPanel mainPanel = new JPanel(new BorderLayout(10, 10)); mainPanel.setBorder(new EmptyBorder(10, 10, 10, 10)); add(mainPanel); JPanel controlPanel = createControlPanel(); mainPanel.add(controlPanel, BorderLayout.NORTH); JSplitPane splitPane = createInfoPanel(); mainPanel.add(splitPane, BorderLayout.CENTER); setLocationRelativeTo(null);
    }
    // ... (MainAppFrame의 나머지 메서드들은 이전과 동일)
    private JPanel createControlPanel() { JPanel panel = new JPanel(new GridBagLayout()); GridBagConstraints gbc = new GridBagConstraints(); gbc.insets = new Insets(5, 5, 5, 5); gbc.fill = GridBagConstraints.HORIZONTAL; panel.setBorder(new TitledBorder("대여/반납")); JLabel userLabel = new JLabel("<html><b>" + loggedInUser.getName() + "</b>님, 환영합니다.</html>"); itemComboBox = new JComboBox<>(items.toArray(new Item[0])); strategyLabel = new JLabel("적용 정책: " + userStrategy.getStrategyName()); JButton rentButton = new JButton("대여하기"); rentButton.addActionListener(e -> rentAction()); JButton returnButton = new JButton("반납하기"); returnButton.addActionListener(e -> returnAction()); gbc.gridx = 0; gbc.gridy = 0; gbc.gridwidth = 2; panel.add(userLabel, gbc); gbc.gridx = 0; gbc.gridy = 1; gbc.gridwidth = 1; panel.add(new JLabel("물품 선택:"), gbc); gbc.gridx = 1; gbc.gridy = 1; panel.add(itemComboBox, gbc); gbc.gridx = 0; gbc.gridy = 2; gbc.gridwidth = 2; panel.add(strategyLabel, gbc); JPanel buttonPanel = new JPanel(new FlowLayout(FlowLayout.RIGHT)); buttonPanel.add(rentButton); buttonPanel.add(returnButton); gbc.gridx = 0; gbc.gridy = 3; gbc.gridwidth = 2; panel.add(buttonPanel, gbc); return panel; }
    private JSplitPane createInfoPanel() { JPanel itemPanel = new JPanel(new BorderLayout()); itemPanel.setBorder(new TitledBorder("실시간 물품 재고")); itemStatusArea = new JTextArea(); itemStatusArea.setEditable(false); itemStatusArea.setFont(new Font("Monospaced", Font.PLAIN, 14)); itemPanel.add(new JScrollPane(itemStatusArea), BorderLayout.CENTER); JPanel logPanel = new JPanel(new BorderLayout()); logPanel.setBorder(new TitledBorder("대여/반납 기록")); logArea = new JTextArea(); logArea.setEditable(false); logArea.setFont(new Font("Monospaced", Font.PLAIN, 12)); logPanel.add(new JScrollPane(logArea), BorderLayout.CENTER); JSplitPane splitPane = new JSplitPane(JSplitPane.VERTICAL_SPLIT, itemPanel, logPanel); splitPane.setResizeWeight(0.4); return splitPane; }
    private void rentAction() { Item selectedItem = (Item) itemComboBox.getSelectedItem(); if (selectedItem != null) { String result = rentalService.rentItem(loggedInUser, selectedItem, userStrategy); logArea.append(result + "\n"); } }
    private void returnAction() { Item selectedItem = (Item) itemComboBox.getSelectedItem(); if (selectedItem != null) { String result = rentalService.returnItem(loggedInUser, selectedItem); logArea.append(result + "\n"); } }
    public void refreshItemComboBox() { DefaultComboBoxModel<Item> model = (DefaultComboBoxModel<Item>) itemComboBox.getModel(); model.removeAllElements(); items.forEach(model::addElement); updateItemStatusArea(); }
    private void updateItemStatusArea() { StringBuilder sb = new StringBuilder(); sb.append(String.format("%-15s | %s\n", "물품명", "현재 재고")); sb.append("---------------------------\n"); items.forEach(item -> sb.append(String.format("%-15s | %d개\n", item.getName(), item.getCurrentStock()))); itemStatusArea.setText(sb.toString()); }
    @Override public void update(Item item) { updateItemStatusArea(); }
}

/** [새로운 UI 클래스] 관리자용 대여 기록 뷰어 */
class RentalHistoryDialog extends JDialog {
    public RentalHistoryDialog(Frame parent, List<RentalRecord> history) {
        super(parent, "전체 대여 기록", true);
        setSize(700, 500);

        String[] columnNames = {"사용자", "물품명", "대여시간", "반납시간"};
        DefaultTableModel tableModel = new DefaultTableModel(columnNames, 0) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false; // 테이블 수정 불가
            }
        };
        
        JTable table = new JTable(tableModel);
        
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");

        for (RentalRecord record : history) {
            String userName = record.getUser().getName();
            String itemName = record.getItemName();
            String rentalTime = record.getRentalTime().format(formatter);
            String returnTime = (record.getReturnTime() != null) ? record.getReturnTime().format(formatter) : " (대여 중)";
            
            tableModel.addRow(new Object[]{userName, itemName, rentalTime, returnTime});
        }
        
        add(new JScrollPane(table));
        setLocationRelativeTo(parent);
    }
}


// LoginDialog, AdminDialog는 이전과 동일
class LoginDialog extends JDialog { private JTextField idField; private JPasswordField passwordField; private JButton loginButton, cancelButton; private User loggedInUser = null; public LoginDialog(Frame parent, List<User> users) { super(parent, "로그인", true); setLayout(new BorderLayout(10, 10)); JPanel panel = new JPanel(new GridBagLayout()); panel.setBorder(new EmptyBorder(10, 10, 10, 10)); GridBagConstraints gbc = new GridBagConstraints(); gbc.fill = GridBagConstraints.HORIZONTAL; gbc.insets = new Insets(4, 4, 4, 4); gbc.gridx = 0; gbc.gridy = 0; panel.add(new JLabel("사용자 ID:"), gbc); gbc.gridx = 1; gbc.gridy = 0; idField = new JTextField(15); panel.add(idField, gbc); gbc.gridx = 0; gbc.gridy = 1; panel.add(new JLabel("비밀번호:"), gbc); gbc.gridx = 1; gbc.gridy = 1; passwordField = new JPasswordField(15); panel.add(passwordField, gbc); loginButton = new JButton("로그인"); cancelButton = new JButton("취소"); JPanel buttonPanel = new JPanel(); buttonPanel.add(loginButton); buttonPanel.add(cancelButton); loginButton.addActionListener(e -> { Optional<User> user = users.stream().filter(u -> u.getId().equals(idField.getText()) && u.getPassword().equals(new String(passwordField.getPassword()))).findFirst(); if (user.isPresent()) { loggedInUser = user.get(); dispose(); } else { JOptionPane.showMessageDialog(this, "ID 또는 비밀번호가 잘못되었습니다.", "로그인 실패", JOptionPane.ERROR_MESSAGE); } }); cancelButton.addActionListener(e -> dispose()); add(panel, BorderLayout.CENTER); add(buttonPanel, BorderLayout.SOUTH); pack(); setLocationRelativeTo(parent); } public User getLoggedInUser() { return loggedInUser; } }
class AdminDialog extends JDialog { public AdminDialog(MainAppFrame parent, List<User> users, List<Item> items) { super(parent, "관리자 패널", true); setSize(500, 400); setLayout(new GridLayout(2, 1, 10, 10)); JPanel userPanel = new JPanel(new GridBagLayout()); userPanel.setBorder(new TitledBorder("신규 사용자 추가")); GridBagConstraints gbcUser = new GridBagConstraints(); gbcUser.insets = new Insets(5, 5, 5, 5); JTextField userIdField = new JTextField(); JTextField userNameField = new JTextField(); JTextField userPassField = new JTextField(); JComboBox<String> userTypeCombo = new JComboBox<>(new String[]{"Student", "Staff"}); JButton addUserButton = new JButton("사용자 추가"); gbcUser.gridx = 0; gbcUser.gridy = 0; gbcUser.weightx = 0.0; gbcUser.fill = GridBagConstraints.NONE; userPanel.add(new JLabel("ID:"), gbcUser); gbcUser.gridy = 1; userPanel.add(new JLabel("이름:"), gbcUser); gbcUser.gridy = 2; userPanel.add(new JLabel("비밀번호:"), gbcUser); gbcUser.gridy = 3; userPanel.add(new JLabel("타입:"), gbcUser); gbcUser.gridx = 1; gbcUser.gridy = 0; gbcUser.weightx = 1.0; gbcUser.fill = GridBagConstraints.HORIZONTAL; userPanel.add(userIdField, gbcUser); gbcUser.gridy = 1; userPanel.add(userNameField, gbcUser); gbcUser.gridy = 2; userPanel.add(userPassField, gbcUser); gbcUser.gridy = 3; userPanel.add(userTypeCombo, gbcUser); gbcUser.gridy = 4; gbcUser.fill = GridBagConstraints.NONE; gbcUser.anchor = GridBagConstraints.EAST; userPanel.add(addUserButton, gbcUser); JPanel itemPanel = new JPanel(new GridBagLayout()); itemPanel.setBorder(new TitledBorder("신규 물품 추가")); GridBagConstraints gbcItem = new GridBagConstraints(); gbcItem.insets = new Insets(5, 5, 5, 5); JTextField itemNameField = new JTextField(); JTextField itemStockField = new JTextField(); JTextField itemFeeField = new JTextField(); JButton addItemButton = new JButton("물품 추가"); gbcItem.gridx = 0; gbcItem.gridy = 0; gbcItem.weightx = 0.0; gbcItem.fill = GridBagConstraints.NONE; itemPanel.add(new JLabel("물품명:"), gbcItem); gbcItem.gridy = 1; itemPanel.add(new JLabel("최대재고:"), gbcItem); gbcItem.gridy = 2; itemPanel.add(new JLabel("기본요금:"), gbcItem); gbcItem.gridx = 1; gbcItem.gridy = 0; gbcItem.weightx = 1.0; gbcItem.fill = GridBagConstraints.HORIZONTAL; itemPanel.add(itemNameField, gbcItem); gbcItem.gridy = 1; itemPanel.add(itemStockField, gbcItem); gbcItem.gridy = 2; itemPanel.add(itemFeeField, gbcItem); gbcItem.gridy = 3; gbcItem.fill = GridBagConstraints.NONE; gbcItem.anchor = GridBagConstraints.EAST; itemPanel.add(addItemButton, gbcItem); addUserButton.addActionListener(e -> { users.add(new User(userIdField.getText(), userNameField.getText(), (String)userTypeCombo.getSelectedItem(), userPassField.getText())); JOptionPane.showMessageDialog(this, "사용자가 추가되었습니다."); userIdField.setText(""); userNameField.setText(""); userPassField.setText(""); }); addItemButton.addActionListener(e -> { try { Item newItem = new Item(itemNameField.getText(), Integer.parseInt(itemStockField.getText()), Double.parseDouble(itemFeeField.getText())); newItem.addObserver(parent); items.add(newItem); parent.refreshItemComboBox(); JOptionPane.showMessageDialog(this, "물품이 추가되었습니다."); itemNameField.setText(""); itemStockField.setText(""); itemFeeField.setText(""); } catch (NumberFormatException ex) { JOptionPane.showMessageDialog(this, "재고와 요금은 숫자로 입력해야 합니다.", "입력 오류", JOptionPane.ERROR_MESSAGE); } }); add(userPanel); add(itemPanel); setLocationRelativeTo(parent); } }


public class RentalSystem_v9 {
    public static void main(String[] args) {
        try { UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName()); } catch (Exception e) { e.printStackTrace(); }

        DataManager dataManager = new DataManager();
        List<User> users = dataManager.loadUsers();
        List<Item> items = dataManager.loadItems();
        List<RentalRecord> rentalHistory = dataManager.loadHistory(); // 대여 기록 로드

        if (users.isEmpty()) {
            users.add(new User("admin", "관리자", "Admin", "admin123"));
            users.add(new User("student1", "김민준", "Student", "1234"));
            users.add(new User("staff1", "박선우", "Staff", "abcd"));
        }
        if (items.isEmpty()) {
            items.add(new Item("3단 우산", 10, 1000.0));
            items.add(new Item("축구공", 5, 2000.0));
        }

        RentalService rentalService = new RentalService(rentalHistory); // 서비스 생성 시 기록 리스트 전달
        
        LoginDialog loginDialog = new LoginDialog(null, users);
        loginDialog.setVisible(true);
        User loggedInUser = loginDialog.getLoggedInUser();

        if (loggedInUser != null) {
            SwingUtilities.invokeLater(() -> {
                MainAppFrame mainFrame = new MainAppFrame(dataManager, rentalService, loggedInUser, users, items, rentalHistory);
                mainFrame.setVisible(true);
            });
        } else {
             System.out.println("로그인하지 않아 프로그램을 종료합니다.");
        }
    }
}
